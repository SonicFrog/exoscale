/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateDbaasServiceKafkaRequest {
    #[serde(
        rename = "authentication-methods",
        skip_serializing_if = "Option::is_none"
    )]
    pub authentication_methods:
        Option<Box<crate::models::UpdateDbaasServiceKafkaRequestAuthenticationMethods>>,
    /// Enable Kafka-REST service
    #[serde(rename = "kafka-rest-enabled", skip_serializing_if = "Option::is_none")]
    pub kafka_rest_enabled: Option<bool>,
    /// Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network
    #[serde(
        rename = "kafka-connect-enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub kafka_connect_enabled: Option<bool>,
    /// Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'
    #[serde(rename = "ip-filter", skip_serializing_if = "Option::is_none")]
    pub ip_filter: Option<Vec<String>>,
    /// Schema Registry configuration
    #[serde(
        rename = "schema-registry-settings",
        skip_serializing_if = "Option::is_none"
    )]
    pub schema_registry_settings: Option<serde_json::Value>,
    /// Kafka REST configuration
    #[serde(
        rename = "kafka-rest-settings",
        skip_serializing_if = "Option::is_none"
    )]
    pub kafka_rest_settings: Option<serde_json::Value>,
    /// Service is protected against termination and powering off
    #[serde(
        rename = "termination-protection",
        skip_serializing_if = "Option::is_none"
    )]
    pub termination_protection: Option<bool>,
    /// Kafka Connect configuration values
    #[serde(
        rename = "kafka-connect-settings",
        skip_serializing_if = "Option::is_none"
    )]
    pub kafka_connect_settings: Option<serde_json::Value>,
    #[serde(rename = "maintenance", skip_serializing_if = "Option::is_none")]
    pub maintenance: Option<Box<crate::models::UpdateDbaasServiceMysqlRequestMaintenance>>,
    /// Kafka-specific settings
    #[serde(rename = "kafka-settings", skip_serializing_if = "Option::is_none")]
    pub kafka_settings: Option<serde_json::Value>,
    /// Enable Schema-Registry service
    #[serde(
        rename = "schema-registry-enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub schema_registry_enabled: Option<bool>,
    /// Subscription plan
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<String>,
}

impl UpdateDbaasServiceKafkaRequest {
    pub fn new() -> UpdateDbaasServiceKafkaRequest {
        UpdateDbaasServiceKafkaRequest {
            authentication_methods: None,
            kafka_rest_enabled: None,
            kafka_connect_enabled: None,
            ip_filter: None,
            schema_registry_settings: None,
            kafka_rest_settings: None,
            termination_protection: None,
            kafka_connect_settings: None,
            maintenance: None,
            kafka_settings: None,
            schema_registry_enabled: None,
            plan: None,
        }
    }
}
