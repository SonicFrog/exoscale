/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// DbaasBackupConfig : DBaaS plan backup config

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasBackupConfig {
    /// Maximum number of backups to keep. Zero when no backups are created.
    #[serde(rename = "max-count", skip_serializing_if = "Option::is_none")]
    pub max_count: Option<i64>,
    /// The interval, in hours, at which backups are generated.                                             For some services, like PostgreSQL, this is the interval                                             at which full snapshots are taken and continuous incremental                                             backup stream is maintained in addition to that.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<i64>,
    /// Mechanism how backups can be restored. 'regular'                                             means a backup is restored as is so that the system                                             is restored to the state it was when the backup was generated.                                             'pitr' means point-in-time-recovery, which allows restoring                                             the system to any state since the first available full snapshot.
    #[serde(rename = "recovery-mode", skip_serializing_if = "Option::is_none")]
    pub recovery_mode: Option<String>,
    /// Interval of taking a frequent backup in service types supporting different backup schedules
    #[serde(
        rename = "frequent-interval-minutes",
        skip_serializing_if = "Option::is_none"
    )]
    pub frequent_interval_minutes: Option<i64>,
    /// Maximum age of the oldest frequent backup in service types supporting different backup schedules
    #[serde(
        rename = "frequent-oldest-age-minutes",
        skip_serializing_if = "Option::is_none"
    )]
    pub frequent_oldest_age_minutes: Option<i64>,
    /// Interval of taking a frequent backup in service types supporting different backup schedules
    #[serde(
        rename = "infrequent-interval-minutes",
        skip_serializing_if = "Option::is_none"
    )]
    pub infrequent_interval_minutes: Option<i64>,
    /// Maximum age of the oldest infrequent backup in service types supporting different backup schedules
    #[serde(
        rename = "infrequent-oldest-age-minutes",
        skip_serializing_if = "Option::is_none"
    )]
    pub infrequent_oldest_age_minutes: Option<i64>,
}

impl DbaasBackupConfig {
    /// DBaaS plan backup config
    pub fn new() -> DbaasBackupConfig {
        DbaasBackupConfig {
            max_count: None,
            interval: None,
            recovery_mode: None,
            frequent_interval_minutes: None,
            frequent_oldest_age_minutes: None,
            infrequent_interval_minutes: None,
            infrequent_oldest_age_minutes: None,
        }
    }
}
