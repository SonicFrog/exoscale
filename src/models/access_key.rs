/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// AccessKey : IAM Access Key

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccessKey {
    /// IAM Access Key name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// IAM Access Key
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// IAM Access Key Secret
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// IAM Access Key type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// IAM Access Key version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Version>,
    /// IAM Access Key tags
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// IAM Access Key operations
    #[serde(rename = "operations", skip_serializing_if = "Option::is_none")]
    pub operations: Option<Vec<String>>,
    /// IAM Access Key Resources
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<crate::models::AccessKeyResource>>,
}

impl AccessKey {
    /// IAM Access Key
    pub fn new() -> AccessKey {
        AccessKey {
            name: None,
            key: None,
            secret: None,
            _type: None,
            version: None,
            tags: None,
            operations: None,
            resources: None,
        }
    }
}

/// IAM Access Key type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "restricted")]
    Restricted,
    #[serde(rename = "unrestricted")]
    Unrestricted,
}

impl Default for Type {
    fn default() -> Type {
        Self::Restricted
    }
}
/// IAM Access Key version
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "v2")]
    V2,
    #[serde(rename = "v1")]
    V1,
}

impl Default for Version {
    fn default() -> Version {
        Self::V2
    }
}
