/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasServiceCommon {
    /// Service last update timestamp (ISO 8601)
    #[serde(rename = "updated-at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Number of service nodes in the active plan
    #[serde(rename = "node-count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<i64>,
    /// Number of CPUs for each node
    #[serde(rename = "node-cpu-count", skip_serializing_if = "Option::is_none")]
    pub node_cpu_count: Option<i64>,
    /// Service integrations
    #[serde(rename = "integrations", skip_serializing_if = "Option::is_none")]
    pub integrations: Option<Vec<crate::models::DbaasIntegration>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub _type: String,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<crate::models::EnumServiceState>,
    /// Service is protected against termination and powering off
    #[serde(
        rename = "termination-protection",
        skip_serializing_if = "Option::is_none"
    )]
    pub termination_protection: Option<bool>,
    /// Service notifications
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<Vec<crate::models::DbaasServiceNotification>>,
    /// TODO UNIT disk space for data storage
    #[serde(rename = "disk-size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i64>,
    /// TODO UNIT of memory for each node
    #[serde(rename = "node-memory", skip_serializing_if = "Option::is_none")]
    pub node_memory: Option<i64>,
    /// Service creation timestamp (ISO 8601)
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Subscription plan
    #[serde(rename = "plan")]
    pub plan: String,
}

impl DbaasServiceCommon {
    pub fn new(name: String, _type: String, plan: String) -> DbaasServiceCommon {
        DbaasServiceCommon {
            updated_at: None,
            node_count: None,
            node_cpu_count: None,
            integrations: None,
            name,
            _type,
            state: None,
            termination_protection: None,
            notifications: None,
            disk_size: None,
            node_memory: None,
            created_at: None,
            plan,
        }
    }
}
