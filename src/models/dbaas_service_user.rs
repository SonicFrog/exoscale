/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// DbaasServiceUser : List of service users

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasServiceUser {
    /// Access certificate for TLS client authentication
    #[serde(rename = "access-cert", skip_serializing_if = "Option::is_none")]
    pub access_cert: Option<String>,
    /// Access certificate validity end time (ISO8601)
    #[serde(
        rename = "access-cert-not-valid-after-time",
        skip_serializing_if = "Option::is_none"
    )]
    pub access_cert_not_valid_after_time: Option<String>,
    #[serde(rename = "access-control", skip_serializing_if = "Option::is_none")]
    pub access_control: Option<Box<crate::models::DbaasServiceUserAccessControl>>,
    /// Service specific access controls for user
    #[serde(rename = "access-key", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<String>,
    /// Access key for TLS client authentication
    #[serde(rename = "authentication", skip_serializing_if = "Option::is_none")]
    pub authentication: Option<Authentication>,
    /// Account password. A missing field indicates a user overridden password.
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Account type
    #[serde(rename = "type")]
    pub _type: String,
    /// Account username
    #[serde(rename = "username")]
    pub username: String,
}

impl DbaasServiceUser {
    /// List of service users
    pub fn new(_type: String, username: String) -> DbaasServiceUser {
        DbaasServiceUser {
            access_cert: None,
            access_cert_not_valid_after_time: None,
            access_control: None,
            access_key: None,
            authentication: None,
            password: None,
            _type,
            username,
        }
    }
}

/// Access key for TLS client authentication
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Authentication {
    #[serde(rename = "caching_sha2_password")]
    CachingSha2Password,
    #[serde(rename = "mysql_native_password")]
    MysqlNativePassword,
}

impl Default for Authentication {
    fn default() -> Authentication {
        Self::CachingSha2Password
    }
}
