/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateDbaasTaskMigrationCheckRequest {
    /// Service URI of the source MySQL or PostgreSQL database with admin credentials.
    #[serde(rename = "source-service-uri")]
    pub source_service_uri: String,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<crate::models::EnumMigrationMethod>,
    /// Comma-separated list of databases, which should be ignored during migration (supported by MySQL only at the moment)
    #[serde(rename = "ignore-dbs", skip_serializing_if = "Option::is_none")]
    pub ignore_dbs: Option<String>,
}

impl CreateDbaasTaskMigrationCheckRequest {
    pub fn new(source_service_uri: String) -> CreateDbaasTaskMigrationCheckRequest {
        CreateDbaasTaskMigrationCheckRequest {
            source_service_uri,
            method: None,
            ignore_dbs: None,
        }
    }
}
