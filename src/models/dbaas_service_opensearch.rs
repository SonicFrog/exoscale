/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasServiceOpensearch {
    /// DbaaS service description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Maximum number of indexes to keep before deleting the oldest one
    #[serde(rename = "max-index-count", skip_serializing_if = "Option::is_none")]
    pub max_index_count: Option<i64>,
    /// Service last update timestamp (ISO 8601)
    #[serde(rename = "updated-at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Number of service nodes in the active plan
    #[serde(rename = "node-count", skip_serializing_if = "Option::is_none")]
    pub node_count: Option<i64>,
    #[serde(rename = "connection-info", skip_serializing_if = "Option::is_none")]
    pub connection_info: Option<Box<crate::models::DbaasServiceOpensearchConnectionInfo>>,
    /// Number of CPUs for each node
    #[serde(rename = "node-cpu-count", skip_serializing_if = "Option::is_none")]
    pub node_cpu_count: Option<i64>,
    /// Service integrations
    #[serde(rename = "integrations", skip_serializing_if = "Option::is_none")]
    pub integrations: Option<Vec<crate::models::DbaasIntegration>>,
    /// State of individual service nodes
    #[serde(rename = "node-states", skip_serializing_if = "Option::is_none")]
    pub node_states: Option<Vec<crate::models::DbaasNodeState>>,
    #[serde(rename = "name")]
    pub name: String,
    /// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
    #[serde(
        rename = "keep-index-refresh-interval",
        skip_serializing_if = "Option::is_none"
    )]
    pub keep_index_refresh_interval: Option<bool>,
    #[serde(rename = "type")]
    pub _type: String,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<crate::models::EnumServiceState>,
    /// Allowed CIDR address blocks for incoming connections
    #[serde(rename = "ip-filter", skip_serializing_if = "Option::is_none")]
    pub ip_filter: Option<Vec<String>>,
    /// List of backups for the service
    #[serde(rename = "backups", skip_serializing_if = "Option::is_none")]
    pub backups: Option<Vec<crate::models::DbaasServiceBackup>>,
    /// Service is protected against termination and powering off
    #[serde(
        rename = "termination-protection",
        skip_serializing_if = "Option::is_none"
    )]
    pub termination_protection: Option<bool>,
    /// Service notifications
    #[serde(rename = "notifications", skip_serializing_if = "Option::is_none")]
    pub notifications: Option<Vec<crate::models::DbaasServiceNotification>>,
    /// Service component information objects
    #[serde(rename = "components", skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<crate::models::DbaasServiceMysqlComponentsInner>>,
    /// Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
    #[serde(rename = "index-patterns", skip_serializing_if = "Option::is_none")]
    pub index_patterns:
        Option<Vec<crate::models::UpdateDbaasServiceOpensearchRequestIndexPatternsInner>>,
    #[serde(rename = "maintenance", skip_serializing_if = "Option::is_none")]
    pub maintenance: Option<Box<crate::models::DbaasServiceMaintenance>>,
    #[serde(rename = "index-template", skip_serializing_if = "Option::is_none")]
    pub index_template:
        Option<Box<crate::models::UpdateDbaasServiceOpensearchRequestIndexTemplate>>,
    /// TODO UNIT disk space for data storage
    #[serde(rename = "disk-size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i64>,
    /// TODO UNIT of memory for each node
    #[serde(rename = "node-memory", skip_serializing_if = "Option::is_none")]
    pub node_memory: Option<i64>,
    /// URI for connecting to the service (may be absent)
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// OpenSearch-specific settings
    #[serde(
        rename = "opensearch-settings",
        skip_serializing_if = "Option::is_none"
    )]
    pub opensearch_settings: Option<serde_json::Value>,
    /// service_uri parameterized into key-value pairs
    #[serde(rename = "uri-params", skip_serializing_if = "Option::is_none")]
    pub uri_params: Option<serde_json::Value>,
    /// OpenSearch version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Service creation timestamp (ISO 8601)
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Subscription plan
    #[serde(rename = "plan")]
    pub plan: String,
    #[serde(
        rename = "opensearch-dashboards",
        skip_serializing_if = "Option::is_none"
    )]
    pub opensearch_dashboards:
        Option<Box<crate::models::UpdateDbaasServiceOpensearchRequestOpensearchDashboards>>,
    /// List of service users
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<crate::models::DbaasServiceOpensearchUsersInner>>,
}

impl DbaasServiceOpensearch {
    pub fn new(name: String, _type: String, plan: String) -> DbaasServiceOpensearch {
        DbaasServiceOpensearch {
            description: None,
            max_index_count: None,
            updated_at: None,
            node_count: None,
            connection_info: None,
            node_cpu_count: None,
            integrations: None,
            node_states: None,
            name,
            keep_index_refresh_interval: None,
            _type,
            state: None,
            ip_filter: None,
            backups: None,
            termination_protection: None,
            notifications: None,
            components: None,
            index_patterns: None,
            maintenance: None,
            index_template: None,
            disk_size: None,
            node_memory: None,
            uri: None,
            opensearch_settings: None,
            uri_params: None,
            version: None,
            created_at: None,
            plan,
            opensearch_dashboards: None,
            users: None,
        }
    }
}
