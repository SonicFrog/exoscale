/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AddServiceToLoadBalancerRequest {
    /// Load Balancer Service name
    #[serde(rename = "name")]
    pub name: String,
    /// Load Balancer Service description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "instance-pool")]
    pub instance_pool: Box<crate::models::InstancePool>,
    /// Network traffic protocol
    #[serde(rename = "protocol")]
    pub protocol: Protocol,
    /// Load balancing strategy
    #[serde(rename = "strategy")]
    pub strategy: Strategy,
    /// Port exposed on the Load Balancer's public IP
    #[serde(rename = "port")]
    pub port: i64,
    /// Port on which the network traffic will be forwarded to on the receiving instance
    #[serde(rename = "target-port")]
    pub target_port: i64,
    #[serde(rename = "healthcheck")]
    pub healthcheck: Box<crate::models::LoadBalancerServiceHealthcheck>,
}

impl AddServiceToLoadBalancerRequest {
    pub fn new(
        name: String,
        instance_pool: crate::models::InstancePool,
        protocol: Protocol,
        strategy: Strategy,
        port: i64,
        target_port: i64,
        healthcheck: crate::models::LoadBalancerServiceHealthcheck,
    ) -> AddServiceToLoadBalancerRequest {
        AddServiceToLoadBalancerRequest {
            name,
            description: None,
            instance_pool: Box::new(instance_pool),
            protocol,
            strategy,
            port,
            target_port,
            healthcheck: Box::new(healthcheck),
        }
    }
}

/// Network traffic protocol
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "udp")]
    Udp,
}

impl Default for Protocol {
    fn default() -> Protocol {
        Self::Tcp
    }
}
/// Load balancing strategy
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Strategy {
    #[serde(rename = "round-robin")]
    RoundRobin,
    #[serde(rename = "source-hash")]
    SourceHash,
}

impl Default for Strategy {
    fn default() -> Strategy {
        Self::RoundRobin
    }
}
