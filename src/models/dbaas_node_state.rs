/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// DbaasNodeState : Automatic maintenance settings

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasNodeState {
    /// Name of the service node
    #[serde(rename = "name")]
    pub name: String,
    /// Extra information regarding the progress for current state
    #[serde(rename = "progress-updates", skip_serializing_if = "Option::is_none")]
    pub progress_updates: Option<Vec<crate::models::DbaasNodeStateProgressUpdate>>,
    /// Role of this node. Only returned for a subset of service types
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Current state of the service node
    #[serde(rename = "state")]
    pub state: State,
}

impl DbaasNodeState {
    /// Automatic maintenance settings
    pub fn new(name: String, state: State) -> DbaasNodeState {
        DbaasNodeState {
            name,
            progress_updates: None,
            role: None,
            state,
        }
    }
}

/// Role of this node. Only returned for a subset of service types
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "standby")]
    Standby,
    #[serde(rename = "master")]
    Master,
    #[serde(rename = "read-replica")]
    ReadReplica,
}

impl Default for Role {
    fn default() -> Role {
        Self::Standby
    }
}
/// Current state of the service node
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "leaving")]
    Leaving,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "syncing_data")]
    SyncingData,
    #[serde(rename = "setting_up_vm")]
    SettingUpVm,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for State {
    fn default() -> State {
        Self::Leaving
    }
}
