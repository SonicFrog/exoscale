/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// Instance : Instance

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Instance {
    /// Instance Anti-affinity Groups
    #[serde(
        rename = "anti-affinity-groups",
        skip_serializing_if = "Option::is_none"
    )]
    pub anti_affinity_groups: Option<Vec<crate::models::AntiAffinityGroup>>,
    #[serde(
        rename = "public-ip-assignment",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_ip_assignment: Option<crate::models::PublicIpAssignment>,
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    /// Instance Security Groups
    #[serde(rename = "security-groups", skip_serializing_if = "Option::is_none")]
    pub security_groups: Option<Vec<crate::models::SecurityGroup>>,
    /// Instance Elastic IPs
    #[serde(rename = "elastic-ips", skip_serializing_if = "Option::is_none")]
    pub elastic_ips: Option<Vec<crate::models::ElasticIp>>,
    /// Instance name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "instance-type", skip_serializing_if = "Option::is_none")]
    pub instance_type: Option<Box<crate::models::InstanceType>>,
    /// Instance Private Networks
    #[serde(rename = "private-networks", skip_serializing_if = "Option::is_none")]
    pub private_networks: Option<Vec<crate::models::PrivateNetwork>>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<crate::models::Template>>,
    /// Instance state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "ssh-key", skip_serializing_if = "Option::is_none")]
    pub ssh_key: Option<Box<crate::models::SshKey>>,
    /// Instance Cloud-init user-data
    #[serde(rename = "user-data", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    #[serde(rename = "manager", skip_serializing_if = "Option::is_none")]
    pub manager: Option<Box<crate::models::Manager>>,
    #[serde(rename = "deploy-target", skip_serializing_if = "Option::is_none")]
    pub deploy_target: Option<Box<crate::models::DeployTarget>>,
    /// Instance IPv6 address
    #[serde(rename = "ipv6-address", skip_serializing_if = "Option::is_none")]
    pub ipv6_address: Option<String>,
    /// Instance ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Instance Snapshots
    #[serde(rename = "snapshots", skip_serializing_if = "Option::is_none")]
    pub snapshots: Option<Vec<crate::models::Snapshot>>,
    /// Instance disk size in GB
    #[serde(rename = "disk-size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i64>,
    /// Instance creation date
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Instance public IPv4 address
    #[serde(rename = "public-ip", skip_serializing_if = "Option::is_none")]
    pub public_ip: Option<String>,
}

impl Instance {
    /// Instance
    pub fn new() -> Instance {
        Instance {
            anti_affinity_groups: None,
            public_ip_assignment: None,
            labels: None,
            security_groups: None,
            elastic_ips: None,
            name: None,
            instance_type: None,
            private_networks: None,
            template: None,
            state: None,
            ssh_key: None,
            user_data: None,
            manager: None,
            deploy_target: None,
            ipv6_address: None,
            id: None,
            snapshots: None,
            disk_size: None,
            created_at: None,
            public_ip: None,
        }
    }
}

/// Instance state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "expunging")]
    Expunging,
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "destroying")]
    Destroying,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "migrating")]
    Migrating,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "destroyed")]
    Destroyed,
}

impl Default for State {
    fn default() -> State {
        Self::Expunging
    }
}
