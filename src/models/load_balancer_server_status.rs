/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// LoadBalancerServerStatus : Load Balancer Service status

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LoadBalancerServerStatus {
    /// Backend server public IP
    #[serde(rename = "public-ip", skip_serializing_if = "Option::is_none")]
    pub public_ip: Option<String>,
    /// Status of the instance's healthcheck
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl LoadBalancerServerStatus {
    /// Load Balancer Service status
    pub fn new() -> LoadBalancerServerStatus {
        LoadBalancerServerStatus {
            public_ip: None,
            status: None,
        }
    }
}

/// Status of the instance's healthcheck
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "success")]
    Success,
}

impl Default for Status {
    fn default() -> Status {
        Self::Failure
    }
}
