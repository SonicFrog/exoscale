/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// DnsDomainRecord : DNS domain record

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DnsDomainRecord {
    /// DNS domain record ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// DNS domain record priority
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// DNS domain record content
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// DNS domain record type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// DNS domain record TTL
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
    /// DNS domain record name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// DNS domain record creation date
    #[serde(rename = "created-at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// DNS domain record update date
    #[serde(rename = "updated-at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl DnsDomainRecord {
    /// DNS domain record
    pub fn new() -> DnsDomainRecord {
        DnsDomainRecord {
            id: None,
            priority: None,
            content: None,
            _type: None,
            ttl: None,
            name: None,
            created_at: None,
            updated_at: None,
        }
    }
}

/// DNS domain record type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NS")]
    NS,
    #[serde(rename = "CAA")]
    CAA,
    #[serde(rename = "NAPTR")]
    NAPTR,
    #[serde(rename = "POOL")]
    POOL,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "HINFO")]
    HINFO,
    #[serde(rename = "CNAME")]
    CNAME,
    #[serde(rename = "SOA")]
    SOA,
    #[serde(rename = "SSHFP")]
    SSHFP,
    #[serde(rename = "SRV")]
    SRV,
    #[serde(rename = "AAAA")]
    AAAA,
    #[serde(rename = "MX")]
    MX,
    #[serde(rename = "DNSKEY")]
    DNSKEY,
    #[serde(rename = "TXT")]
    TXT,
    #[serde(rename = "DS")]
    DS,
    #[serde(rename = "PTR")]
    PTR,
    #[serde(rename = "ALIAS")]
    ALIAS,
    #[serde(rename = "URL")]
    URL,
    #[serde(rename = "SPF")]
    SPF,
}

impl Default for Type {
    fn default() -> Type {
        Self::NS
    }
}
