/*
 * Exoscale Public API
 *
 *  Infrastructure automation API, allowing programmatic access to all Exoscale products and services.  The [OpenAPI Specification](http://spec.openapis.org/oas/v3.0.3.html) source of this documentation can be obtained here:  * [JSON format](https://bump.sh/doc/exoscale-api.json) * [YAML format](https://bump.sh/doc/exoscale-api.yaml)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@exoscale.com
 * Generated by: https://openapi-generator.tech
 */

/// DbaasNodeStateProgressUpdate : Extra information regarding the progress for current state

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DbaasNodeStateProgressUpdate {
    /// Indicates whether this phase has been completed or not
    #[serde(rename = "completed")]
    pub completed: bool,
    /// Current progress for this phase. May be missing or null.
    #[serde(rename = "current", skip_serializing_if = "Option::is_none")]
    pub current: Option<i64>,
    /// Maximum progress value for this phase. May be missing or null. May change.
    #[serde(rename = "max", skip_serializing_if = "Option::is_none")]
    pub max: Option<i64>,
    /// Minimum progress value for this phase. May be missing or null.
    #[serde(rename = "min", skip_serializing_if = "Option::is_none")]
    pub min: Option<i64>,
    /// Key identifying this phase
    #[serde(rename = "phase")]
    pub phase: Phase,
    /// Unit for current/min/max values. New units may be added.                         If null should be treated as generic unit
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

impl DbaasNodeStateProgressUpdate {
    /// Extra information regarding the progress for current state
    pub fn new(completed: bool, phase: Phase) -> DbaasNodeStateProgressUpdate {
        DbaasNodeStateProgressUpdate {
            completed,
            current: None,
            max: None,
            min: None,
            phase,
            unit: None,
        }
    }
}

/// Key identifying this phase
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Phase {
    #[serde(rename = "stream")]
    Stream,
    #[serde(rename = "basebackup")]
    Basebackup,
    #[serde(rename = "prepare")]
    Prepare,
    #[serde(rename = "finalize")]
    Finalize,
}

impl Default for Phase {
    fn default() -> Phase {
        Self::Stream
    }
}
